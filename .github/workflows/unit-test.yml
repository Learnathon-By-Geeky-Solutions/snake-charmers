name: Unit Tests

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main

jobs:
  unit-tests:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Ensure full history is available

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Verify Docker installation
          run: |
            docker --version
            docker compose version
          
        - name: Determine changed service
          id: check_changes
          run: |
                echo "Checking for changes in PR..."
                
                CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
                
                echo "Changed files:"
                echo "$CHANGED_FILES"

                SERVICES=("auth-service" "location-service" "ambulance-finder-service" "trip-service")
               
                SERVICE_CHANGED="none"

                for SERVICE in "${SERVICES[@]}"; do
                  if echo "$CHANGED_FILES" | grep -q "^$SERVICE/"; then
                    SERVICE_CHANGED=$SERVICE
                    break
                  fi
                done

                echo "SERVICE_CHANGED=$SERVICE_CHANGED" >> $GITHUB_ENV
                
        - name: Run unit tests
          if: env.SERVICE_CHANGED != 'none'
          env:
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
            RIDER_PASSWORD_1: ${{ secrets.RIDER_PASSWORD_1 }}
            RIDER_PASSWORD_2: ${{ secrets.RIDER_PASSWORD_2 }}
            DRIVER_PASSWORD_1: ${{ secrets.DRIVER_PASSWORD_1 }}
            DRIVER_PASSWORD_2: ${{ secrets.DRIVER_PASSWORD_2 }}

          run: |
            docker compose -f ${{ env.SERVICE_CHANGED }}/docker-compose.dev.yml up --build --abort-on-container-exit ${{ env.SERVICE_CHANGED }}-test
              

        - name: Debug Coverage Report
          if: env.SERVICE_CHANGED != 'none'
          run: |
            echo "Service Changed: ${{ env.SERVICE_CHANGED }}"
            pwd
            ls ${{ env.SERVICE_CHANGED }}
            cat ${{ env.SERVICE_CHANGED }}/coverage.xml || echo "No coverage.xml found"


        - name: SonarQube Scan
          if: env.SERVICE_CHANGED != 'none'
          uses: SonarSource/sonarqube-scan-action@v5
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
